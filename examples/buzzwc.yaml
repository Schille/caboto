---
# Source: buzzword-counter/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: buzzwc-rabbitmq
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
secrets:
  - name: "buzzwc-rabbitmq"
---
# Source: buzzword-counter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: buzzwc-buzzword-counter
  labels:
    helm.sh/chart: buzzword-counter-0.1.0
    app.kubernetes.io/name: buzzword-counter
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: buzzword-counter/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: buzzwc-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.2.8
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: "Zm9LOHZFTllFQQ=="
  postgresql-password: "YWxkcmlu"
---
# Source: buzzword-counter/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: buzzwc-rabbitmq
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
type: Opaque
data:
  
  rabbitmq-password: "YWxkcmlu"
  
  
  rabbitmq-erlang-cookie: "VnJmZ21KcGVDT1dxeFFlcE95RGVPZVN4Q1pZdHc0VTU="
---
# Source: buzzword-counter/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: buzzwc-rabbitmq-config
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
data:
  enabled_plugins: |-
    [rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap].
  rabbitmq.conf: |-
    ##username and password
    default_user=buzz
    default_pass=CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator=min-masters
    # enable guest user
    loopback_users.guest = false
    #disk_free_limit.absolute = 50MB
    #management.load_definitions = /app/load_definition.json
---
# Source: buzzword-counter/charts/rabbitmq/templates/healthchecks.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: buzzwc-rabbitmq-healthchecks
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
data:
  rabbitmq-health-check: |-
    #!/bin/sh
    START_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
    if [ -f ${START_FLAG} ]; then
        rabbitmqctl node_health_check
        RESULT=$?
        if [ $RESULT -ne 0 ]; then
          rabbitmqctl status
          exit $?
        fi
        rm -f ${START_FLAG}
        exit ${RESULT}
    fi
    rabbitmq-api-check $1 $2
  rabbitmq-api-check: |-
    #!/bin/sh
    set -e
    URL=$1
    EXPECTED=$2
    ACTUAL=$(curl --silent --show-error --fail "${URL}")
    echo "${ACTUAL}"
    test "${EXPECTED}" = "${ACTUAL}"
---
# Source: buzzword-counter/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: globalenv-configmap
data:
  CELERY_BROKER_URL: "amqp://buzz:aldrin@buzzword-counter-rabbitmq:5672/"
  CELERY_GID: "1337"
  CELERY_LOG_LEVEL: "info"
  CELERY_UID: "1337"
  DATABASE_HOST: "buzzword-counter-postgresql"
  DATABASE_NAME: "buzzwords"
  DATABASE_PASSWORD: "aldrin"
  DATABASE_USER: "buzz"
  DJANGO_DEBUG: "false"
  DJANGO_SECRET_KEY: "lc800)_$ely9p=4r^z%sd90eom58xlat#rma0gy5uc+=%vrc-2"
---
# Source: buzzword-counter/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: buzzwc-rabbitmq-endpoint-reader
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: buzzword-counter/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: buzzwc-rabbitmq-endpoint-reader
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
subjects:
  - kind: ServiceAccount
    name: buzzwc-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: buzzwc-rabbitmq-endpoint-reader
---
# Source: buzzword-counter/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: buzzwc-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.2.8
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: buzzwc
---
# Source: buzzword-counter/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: buzzwc-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.2.8
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: buzzwc
    role: primary
---
# Source: buzzword-counter/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: buzzwc-rabbitmq-headless
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: stats
      port: 15672
      targetPort: stats
  selector:
    app: rabbitmq
    release: "buzzwc"
---
# Source: buzzword-counter/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: buzzwc-rabbitmq
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector:
    app: rabbitmq
    release: "buzzwc"
---
# Source: buzzword-counter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: buzzwc-buzzword-counter
  labels:
    helm.sh/chart: buzzword-counter-0.1.0
    app.kubernetes.io/name: buzzword-counter
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: buzzword-counter
    app.kubernetes.io/instance: buzzwc
---
# Source: buzzword-counter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: buzzwc-buzzword-counter-web
  labels:
    helm.sh/chart: buzzword-counter-0.1.0
    app.kubernetes.io/name: buzzword-counter
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: buzzword-counter
      app.kubernetes.io/instance: buzzwc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: buzzword-counter
        app.kubernetes.io/instance: buzzwc
    spec:
      serviceAccountName: buzzwc-buzzword-counter
      securityContext:
        {}
      containers:
        - name: buzzword-counter
          securityContext:
            {}
          image: "quay.io/blueshoe/buzzword-counter:latest"
          imagePullPolicy: Always
          command: ["/bin/sh","-c"]
          args: ["python manage.py serve
                  --command 'migrate'
                  --command 'collectstatic --no-input'
                  --check-migrations
                  --port 9000
                  --probe-port 9001
                  --static
                 "]
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /alive
              port: 9001
            periodSeconds: 10
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 9001
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /startup
              port: 9001
          resources:
            {}
          envFrom:
            - configMapRef:
                name: globalenv-configmap
---
# Source: buzzword-counter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: buzzwc-buzzword-counter-worker
  labels:
    helm.sh/chart: buzzword-counter-0.1.0
    app.kubernetes.io/name: buzzword-counter-worker
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: buzzword-counter-worker
      app.kubernetes.io/instance: buzzwc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: buzzword-counter-worker
        app.kubernetes.io/instance: buzzwc
    spec:
      serviceAccountName: buzzwc-buzzword-counter
      securityContext:
        {}
      containers:
        - name: buzzword-counter
          securityContext:
            {}
          image: "quay.io/blueshoe/buzzword-counter:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          command: ["/bin/sh","-c"]
          args: ["celery worker
                  -l $CELERY_LOG_LEVEL
                  -A buzzword_counter.configuration.celery.app
                  --workdir /code/
                  --uid $CELERY_UID
                  --gid $CELERY_GID
                  -O fair
                 "]
          resources:
            {}
          envFrom:
            - configMapRef:
                name: globalenv-configmap
          env:
            - name: DJANGO_RUN_ENV
              value: worker
---
# Source: buzzword-counter/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: buzzwc-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.2.8
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: buzzwc-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: buzzwc
      role: primary
  template:
    metadata:
      name: buzzwc-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.2.8
        app.kubernetes.io/instance: buzzwc
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: buzzwc
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/minideb:buster
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - /bin/sh
            - -cx
            - |
              chown 1001:1001 /bitnami/postgresql
              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name "conf" -not -name ".snapshot" -not -name "lost+found" | \
                xargs chown -R 1001:1001
              chmod -R 777 /dev/shm
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
            - name: dshm
              mountPath: /dev/shm
      containers:
        - name: buzzwc-postgresql
          image: docker.io/bitnami/postgresql:11.10.0-debian-10-r83
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: buzzwc-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "buzz"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: buzzwc-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "buzzwords"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "buzz" -d "dbname=buzzwords" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "buzz" -d "dbname=buzzwords" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: buzzword-counter/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: buzzwc-rabbitmq
  namespace: default
  labels:
    app: rabbitmq
    chart: rabbitmq-6.25.13
    release: "buzzwc"
    heritage: "Helm"
spec:
  serviceName: buzzwc-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: rabbitmq
      release: "buzzwc"
  template:
    metadata:
      labels:
        app: rabbitmq
        release: "buzzwc"
        chart: rabbitmq-6.25.13
      annotations:
        checksum/secret: d2bcb97ef9f536abbe994455d7860bbefa150b51bd67d24c0bf1492e5546a97e
    spec:      
      serviceAccountName: buzzwc-rabbitmq
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: volume-permissions
          image: "docker.io/bitnami/minideb:buster"
          imagePullPolicy: "Always"
          command: ["/bin/chown", "-R", "1001:1001", "/opt/bitnami/rabbitmq/var/lib/rabbitmq"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: "/opt/bitnami/rabbitmq/var/lib/rabbitmq"
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.3-debian-10-r92
          imagePullPolicy: "IfNotPresent"
          command:
            - bash
            - -ec
            - |
               mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/
               mkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/
               touch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
               #persist the erlang cookie in both places for server and cli tools
               echo $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
               cp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/
               #change permission so only the user has access to the cookie file
               chmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
               #copy the mounted configuration to both places
               cp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq
               # Apply resources limits
               ulimit -n "${RABBITMQ_ULIMIT_NOFILES}"
               #replace the default password that is generated
               sed -i "/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\/\\\\}" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf
               exec rabbitmq-server
          volumeMounts:
            - name: config-volume
              mountPath: /opt/bitnami/rabbitmq/conf
            - name: healthchecks
              mountPath: /usr/local/sbin/rabbitmq-api-check
              subPath: rabbitmq-api-check
            - name: healthchecks
              mountPath: /usr/local/sbin/rabbitmq-health-check
              subPath: rabbitmq-health-check
            - name: data
              mountPath: "/opt/bitnami/rabbitmq/var/lib/rabbitmq"
          ports:
            - name: epmd
              containerPort: 4369
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - rabbitmq-api-check "http://buzz:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node" '{"status":"ok"}'
            initialDelaySeconds: 120
            timeoutSeconds: 20
            periodSeconds: 30
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - rabbitmq-health-check "http://buzz:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node" '{"status":"ok"}'
            initialDelaySeconds: 10
            timeoutSeconds: 20
            periodSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "buzzwc-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_NODENAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: buzzwc-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: buzzwc-rabbitmq
                  key: rabbitmq-password
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      volumes:
        - name: config-volume
          configMap:
            name: buzzwc-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
              - key: enabled_plugins
                path: enabled_plugins
        - name: healthchecks
          configMap:
            name: buzzwc-rabbitmq-healthchecks
            items:
              - key: rabbitmq-health-check
                path: rabbitmq-health-check
                mode: 111
              - key: rabbitmq-api-check
                path: rabbitmq-api-check
                mode: 111
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: rabbitmq
          release: "buzzwc"
          heritage: "Helm"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: buzzword-counter/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: buzzwc-buzzword-counter
  labels:
    helm.sh/chart: buzzword-counter-0.1.0
    app.kubernetes.io/name: buzzword-counter
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "buzzword-counter.127.0.0.1.nip.io"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: buzzword-counter
                port:
                  number: 9000
---
# Source: buzzword-counter/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "buzzwc-buzzword-counter-test-connection"
  labels:
    helm.sh/chart: buzzword-counter-0.1.0
    app.kubernetes.io/name: buzzword-counter
    app.kubernetes.io/instance: buzzwc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['buzzwc-buzzword-counter:9000']
  restartPolicy: Never
